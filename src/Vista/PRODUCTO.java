/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Control.CategoriaController;
import Control.ProductoController;
import Control.ProveedorController;
import ModeloSG.E_Categoria;
import ModeloSG.E_Producto;
import ModeloSG.E_Proveedor;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Dennis
 */
public class PRODUCTO extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public PRODUCTO() {
        initComponents();
        listarProductos(); // Llamada al método para listar productos al iniciar la vista
        cargarComboboxes(); // Carga las categorías y proveedores al inicializar la vista
        btnActualizar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnReporte.setEnabled(false);

        habilitarnuevo(false);

        setLocationRelativeTo(null);

//        setSize(750, 450);
    }

    void habilitarnuevo(boolean ver) {
        txtNombre.setEnabled(ver);
        txtPrecioVenta.setEnabled(ver);
        comboBoxCategorias.setEnabled(ver);
        comboBoxProveedores.setEnabled(ver);

        btnGrabar.setEnabled(ver);
        btnCancelar.setEnabled(ver);

    }

    private void limpiarCampos() {
        txtNombre.setText("");
        txtPrecioVenta.setText("");
        comboBoxCategorias.setSelectedIndex(0);
        comboBoxProveedores.setSelectedIndex(0);
    }

    private void listarProductos() {
        try {
            ProductoController controller = new ProductoController();
            List<E_Producto> productos = controller.obtenerListadoProductos();

            DefaultTableModel model = (DefaultTableModel) TProducto.getModel(); // Asegúrate de que el nombre de tu JTable es TProducto
            model.setRowCount(0); // Limpiar la tabla antes de llenar

            for (E_Producto producto : productos) {
                model.addRow(new Object[]{
                    producto.getProductoID(),
                    producto.getNombre(),
                    producto.getPrecioVenta(),
                    producto.getNombreCategoria(), // Nombre de la categoría
                    producto.getNombreProveedor() // Nombre del proveedor
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al listar productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarComboboxes() {
        try {
            // Cargar categorías
            CategoriaController categoriaController = new CategoriaController();
            List<String> categorias = categoriaController.obtenerNombresCategorias(); // Esto devuelve List<String>

            for (String categoria : categorias) {
                comboBoxCategorias.addItem(categoria); // Agrega el nombre de la categoría al ComboBox
            }

            // Cargar proveedores
            ProveedorController proveedorController = new ProveedorController();
            List<String> proveedores = proveedorController.obtenerNombresProveedores();

            for (String proveedor : proveedores) {
                comboBoxProveedores.addItem(proveedor); // Agrega el nombre del proveedor al ComboBox
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar los comboboxes: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TProducto = new javax.swing.JTable();
        txtBuscar = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnNuevo = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnReporte = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        comboBoxCategorias = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        comboBoxProveedores = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtPrecioVenta = new javax.swing.JTextField();
        btnGrabar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnCate = new javax.swing.JButton();
        btnProve = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PRODUCTO");
        setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        TProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "CODPROD", "NOMBRE", "P.VENTA", "CATEGORIA", "PROVEEDOR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TProductoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TProducto);
        if (TProducto.getColumnModel().getColumnCount() > 0) {
            TProducto.getColumnModel().getColumn(0).setResizable(false);
            TProducto.getColumnModel().getColumn(1).setResizable(false);
            TProducto.getColumnModel().getColumn(2).setResizable(false);
            TProducto.getColumnModel().getColumn(3).setResizable(false);
            TProducto.getColumnModel().getColumn(4).setResizable(false);
        }

        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });

        jLabel7.setText("BUSCAR");

        btnNuevo.setText("NUEVO");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnReporte.setText("REPORTE");

        btnSalir.setText("SALIR");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel3.setText("PRODUCTO");

        jLabel5.setText("CATEGORIA");

        comboBoxCategorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seleccione" }));

        jLabel9.setText("PROVEEDOR");

        comboBoxProveedores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seleccione" }));

        jLabel4.setText("PRECIO DE VENTA");

        btnGrabar.setText("GUARDAR");
        btnGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarActionPerformed(evt);
            }
        });

        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnCate.setText("AGREGAR ");
        btnCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCateActionPerformed(evt);
            }
        });

        btnProve.setText("AGREGAR ");
        btnProve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProveActionPerformed(evt);
            }
        });

        jButton1.setText("ACT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnNuevo)
                        .addGap(34, 34, 34)
                        .addComponent(btnEliminar)
                        .addGap(39, 39, 39)
                        .addComponent(btnReporte)
                        .addGap(46, 46, 46)
                        .addComponent(btnSalir))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGrabar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(202, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel5))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(comboBoxProveedores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(comboBoxCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCate)
                                    .addComponent(btnProve)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(47, 47, 47)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(53, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(303, 303, 303)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNuevo)
                            .addComponent(btnEliminar)
                            .addComponent(btnReporte)
                            .addComponent(btnSalir)
                            .addComponent(btnGrabar)
                            .addComponent(btnCancelar)
                            .addComponent(btnActualizar))
                        .addGap(62, 62, 62))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(comboBoxCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(comboBoxProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnProve))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("LISTADO ", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarActionPerformed

        String nombre = txtNombre.getText();
        double precioVenta = Double.parseDouble(txtPrecioVenta.getText());

        // Obtener los nombres seleccionados en los ComboBox
        String nombreCategoria = (String) comboBoxCategorias.getSelectedItem();
        String nombreProveedor = (String) comboBoxProveedores.getSelectedItem();

        try {
            // Obtener los IDs de categoría y proveedor a partir de los nombres seleccionados
            CategoriaController categoriaController = new CategoriaController();
            ProveedorController proveedorController = new ProveedorController();

            int categoriaID = categoriaController.obtenerIdCategoriaPorNombre(nombreCategoria);
            int proveedorID = proveedorController.obtenerIdProveedorPorNombre(nombreProveedor);

            // Guardar el producto
            ProductoController controller = new ProductoController();
            controller.agregarProducto(nombre, precioVenta, categoriaID, proveedorID);

            JOptionPane.showMessageDialog(this, "Producto agregado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            listarProductos(); // Actualizar la lista de productos
            limpiarCampos();
            habilitarnuevo(false);
            btnNuevo.setEnabled(true);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al agregar el producto: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGrabarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        habilitarnuevo(true);
        btnNuevo.setEnabled(false);
        limpiarCampos();
        btnActualizar.setEnabled(false);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:

        habilitarnuevo(false);
        btnNuevo.setEnabled(true);
        btnActualizar.setEnabled(false);
        limpiarCampos();
        btnEliminar.setEnabled(false);

    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        // Obtener el ID del producto seleccionado desde la tabla
        // Verifica que se haya seleccionado un producto
        if (TProducto.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un producto de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtener el ID del producto seleccionado desde la tabla
        int productoID = (int) TProducto.getValueAt(TProducto.getSelectedRow(), 0); // Asegúrate de que esta columna contenga el ID del producto

        // Pregunta al usuario si está seguro de eliminar el producto
        int confirm = JOptionPane.showConfirmDialog(this,
                "¿Estás seguro de que deseas eliminar este producto?",
                "Confirmar Eliminación",
                JOptionPane.YES_NO_OPTION);

        // Si el usuario selecciona "Sí", proceder a eliminar
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // Eliminar el producto
                ProductoController controller = new ProductoController();
                controller.eliminarProducto(productoID);

                JOptionPane.showMessageDialog(this, "Producto eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                listarProductos(); // Actualizar la lista de productos

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al eliminar el producto: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Si el usuario selecciona "No", no se hace nada
            JOptionPane.showMessageDialog(this, "Eliminación cancelada.", "Cancelado", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed

        String nombre = txtNombre.getText();
        double precioVenta = Double.parseDouble(txtPrecioVenta.getText());

        // Obtener los nombres seleccionados en los ComboBox
        String nombreCategoria = (String) comboBoxCategorias.getSelectedItem();
        String nombreProveedor = (String) comboBoxProveedores.getSelectedItem();

        try {
            // Obtener los IDs de categoría y proveedor a partir de los nombres seleccionados
            CategoriaController categoriaController = new CategoriaController();
            ProveedorController proveedorController = new ProveedorController();

            int categoriaID = categoriaController.obtenerIdCategoriaPorNombre(nombreCategoria);
            int proveedorID = proveedorController.obtenerIdProveedorPorNombre(nombreProveedor);

            // Obtener el ID del producto seleccionado desde la tabla
            int productoID = (int) TProducto.getValueAt(TProducto.getSelectedRow(), 0); // Asegúrate de que esta columna contenga el ID del producto

            // Guardar el producto actualizado
            ProductoController controller = new ProductoController();
            controller.actualizarProducto(productoID, nombre, precioVenta, categoriaID, proveedorID);

            JOptionPane.showMessageDialog(this, "Producto actualizado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            listarProductos(); // Actualizar la lista de productos

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al actualizar el producto: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un producto de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

        limpiarCampos();
        btnActualizar.setEnabled(false);
        btnCancelar.setEnabled(false);


    }//GEN-LAST:event_btnActualizarActionPerformed

    private void TProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TProductoMouseClicked
        // TODO add your handling code here:

        // Verifica si el clic fue doble (2)
        if (evt.getClickCount() == 2) {
            // Obtener la fila seleccionada
            int filaSeleccionada = TProducto.getSelectedRow();

            if (filaSeleccionada != -1) {
                // Obtiene los datos de la fila seleccionada y los asigna a las cajas de texto y ComboBox
                String nombreProducto = (String) TProducto.getValueAt(filaSeleccionada, 1); // Suponiendo que el nombre está en la columna 1
                double precioVenta = (double) TProducto.getValueAt(filaSeleccionada, 2);   // Suponiendo que el precio está en la columna 2
                String nombreCategoria = (String) TProducto.getValueAt(filaSeleccionada, 3); // Suponiendo que la categoría está en la columna 3
                String nombreProveedor = (String) TProducto.getValueAt(filaSeleccionada, 4); // Suponiendo que el proveedor está en la columna 4

                // Asignar los valores a las cajas de texto
                txtNombre.setText(nombreProducto);
                txtPrecioVenta.setText(String.valueOf(precioVenta));
                habilitarnuevo(true);
                btnActualizar.setEnabled(true);
                btnEliminar.setEnabled(true);
                btnGrabar.setEnabled(false);
                // Selecciona la categoría y el proveedor en los ComboBox
                comboBoxCategorias.setSelectedItem(nombreCategoria);
                comboBoxProveedores.setSelectedItem(nombreProveedor);
            }
        }


    }//GEN-LAST:event_TProductoMouseClicked

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        // TODO add your handling code here:
         String textoBusqueda = txtBuscar.getText().toLowerCase(); // Obtener el texto en minúsculas
        DefaultTableModel modelo = (DefaultTableModel) TProducto.getModel(); // Suponiendo que tu tabla tiene un DefaultTableModel
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo); // Crear un sorter para el modelo
        TProducto.setRowSorter(sorter); // Asignar el sorter a la tabla

        // Filtrar basado en la búsqueda
        if (textoBusqueda.trim().length() == 0) {
            sorter.setRowFilter(null); // Si el campo está vacío, mostrar todas las filas
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + textoBusqueda)); // Filtrar insensiblemente a mayúsculas
        }
   
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCateActionPerformed
        // TODO add your handling code here:
         CATEGORIA nuevoFormulario = new CATEGORIA();
                nuevoFormulario.setVisible(true);
    }//GEN-LAST:event_btnCateActionPerformed

    private void btnProveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProveActionPerformed
        // TODO add your handling code here:
             PROVEEDOR nuevoFormulario = new PROVEEDOR();
                nuevoFormulario.setVisible(true);
    }//GEN-LAST:event_btnProveActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          dispose();
          PRODUCTO nuevoFormulario = new PRODUCTO();
                nuevoFormulario.setVisible(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PRODUCTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PRODUCTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PRODUCTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PRODUCTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PRODUCTO().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TProducto;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCate;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGrabar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnProve;
    private javax.swing.JButton btnReporte;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> comboBoxCategorias;
    private javax.swing.JComboBox<String> comboBoxProveedores;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecioVenta;
    // End of variables declaration//GEN-END:variables
}
